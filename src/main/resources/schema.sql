CREATE ALIAS IF NOT EXISTS getDate AS
'java.util.Date getDate() {
    return new java.util.Date();
}';

CREATE TABLE IF NOT EXISTS MPA
(
    "id"   BIGINT  NOT NULL PRIMARY KEY ,
    "name" VARCHAR NOT NULL
);

CREATE TABLE IF NOT EXISTS FILMS
(
    "id"           BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name"         VARCHAR   NOT NULL,
    "release_date" TIMESTAMP NOT NULL,
    "description"  VARCHAR(200),
    "duration"     INTEGER   NOT NULL,
    "rate"         INTEGER   NOT NULL,
    "mpa"          INTEGER   NOT NULL,
    CONSTRAINT name_space
        CHECK ("name" NOT LIKE '% %' AND "name" NOT LIKE ''),
    CONSTRAINT duration_positive
        CHECK ("duration" >= 0),
    CONSTRAINT "films_mpa_foreign" FOREIGN KEY ("mpa") REFERENCES "MPA" ("id")
);

CREATE TABLE IF NOT EXISTS USERS
(
    "id"       BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "email"    VARCHAR NOT NULL UNIQUE,
    "login"    VARCHAR NOT NULL UNIQUE,
    "name"     VARCHAR,
    "birthday" TIMESTAMP,
    CONSTRAINT login_space
        CHECK ("login" NOT LIKE '% %' and "login" NOT LIKE ''),
    CONSTRAINT email_at
        CHECK ("email" LIKE '%@%'),
    CONSTRAINT birthday_check
        CHECK (CAST("birthday" AS date) <= CAST(getDate() as date))
);


CREATE TABLE IF NOT EXISTS GENRES
(
    "id"   BIGINT  NOT NULL PRIMARY KEY,
    "name" VARCHAR NOT NULL
);



CREATE TABLE IF NOT EXISTS FRIENDSHIP
(
    "user_id"   BIGINT NOT NULL,
    "friend_id" BIGINT NOT NULL,
    CONSTRAINT "friendship_friend_id_foreign" FOREIGN KEY ("friend_id") REFERENCES USERS ("id"),
    CONSTRAINT "friendship_user_id_foreign" FOREIGN KEY ("user_id") REFERENCES USERS ("id"),
    primary key ("user_id", "friend_id")
);


CREATE TABLE IF NOT EXISTS LIKES
(
    "film_id" BIGINT NOT NULL,
    "user_id" BIGINT NOT NULL,
    CONSTRAINT "likes_film_id_foreign" FOREIGN KEY ("film_id") REFERENCES FILMS ("id"),
    CONSTRAINT "likes_user_id_foreign" FOREIGN KEY ("user_id") REFERENCES USERS ("id"),
    PRIMARY KEY ("film_id", "user_id")
);


CREATE TABLE IF NOT EXISTS FILM_GENRE
(
    "film_id"  BIGINT  NOT NULL,
    "genre_id" INTEGER NOT NULL,
    CONSTRAINT "film_genre_film_id_foreign" FOREIGN KEY ("film_id") REFERENCES FILMS ("id"),
    CONSTRAINT "film_genre_genre_id_foreign" FOREIGN KEY ("genre_id") REFERENCES GENRES ("id"),
    PRIMARY KEY ("film_id", "genre_id")
);
